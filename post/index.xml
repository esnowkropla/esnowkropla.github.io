<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Elliot Snow-Kropla</title>
    <link>http://ejsk.ca/post/index.xml</link>
    <description>Recent content in Posts on Elliot Snow-Kropla</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Elliot Snow-Kropla</copyright>
    <lastBuildDate>Sun, 01 Jan 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Rust Web-Development, Part 1</title>
      <link>http://ejsk.ca/post/rust-web/</link>
      <pubDate>Fri, 04 Aug 2017 10:43:49 -0400</pubDate>
      
      <guid>http://ejsk.ca/post/rust-web/</guid>
      <description>

&lt;p&gt;Now that &lt;a href=&#34;http://store.steampowered.com/app/405240&#34; target=&#34;_blank&#34;&gt;Hairy Little Buggers&lt;/a&gt; is wrapped up, I figured I&amp;rsquo;d use my sabbatical to dive into web-development. This is also a good chance to play with &lt;a href=&#34;http://rust-lang.org&#34; target=&#34;_blank&#34;&gt;Rust&lt;/a&gt; again; the last time I checked it out was before 1.0 when I was playing with the &lt;a href=&#34;http://cryptopals.com/&#34; target=&#34;_blank&#34;&gt;Matasano crypto challenges&lt;/a&gt;, so it will be interesting to see how much more mature the ecosystem is.&lt;/p&gt;

&lt;p&gt;Now, I don&amp;rsquo;t really know anything about web-development, so after a little research I picked up &lt;a href=&#34;https://www.amazon.ca/Flask-Web-Development-Developing-Applications/dp/1449372627/ref=sr_1_sc_1?ie=UTF8&amp;amp;qid=1501866858&amp;amp;sr=8-1-spell&#34; target=&#34;_blank&#34;&gt;Flask Web Development&lt;/a&gt; based on the &lt;a href=&#34;https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world&#34; target=&#34;_blank&#34;&gt;Flask Mega-Tutorial&lt;/a&gt;. I know Python fairly well so I can mentally translate the Python into Rust, and &lt;a href=&#34;http://flask.pocoo.org&#34; target=&#34;_blank&#34;&gt;Flask&lt;/a&gt; seems like the framework I would pick were I to write a web app in Python.&lt;/p&gt;

&lt;h2 id=&#34;framework-selection&#34;&gt;Framework Selection&lt;/h2&gt;

&lt;p&gt;Much as I love writing everything myself, sometimes it makes sense to stand on the shoulders of giants. A combination of browsing the rust sub-reddit and searching the web suggested five initial candidates for a web framework:
&lt;a href=&#34;https://github.com/nickel-org/nickel.rs&#34; target=&#34;_blank&#34;&gt;Nickel&lt;/a&gt;,
&lt;a href=&#34;https://ironframework.io&#34; target=&#34;_blank&#34;&gt;Iron&lt;/a&gt;,
&lt;a href=&#34;https://rocket.rs&#34; target=&#34;_blank&#34;&gt;Rocket&lt;/a&gt;,
&lt;a href=&#34;https://github.com/tomaka/rouille&#34; target=&#34;_blank&#34;&gt;Rouille&lt;/a&gt;, and
&lt;a href=&#34;https://github.com/fengsp/pencil&#34; target=&#34;_blank&#34;&gt;Pencil&lt;/a&gt;. The following is just my own personal experiences with each framework, and is definitely not meant to be the definitive objective guide to web developent in Rust. In particular, these are my fickle first impressions and snap judgements. Do your own research!&lt;/p&gt;

&lt;h3 id=&#34;rocket&#34;&gt;Rocket&lt;/h3&gt;

&lt;p&gt;Rocket requires the use of the &lt;code&gt;nightly&lt;/code&gt; compiler, which annoys me.  A pretty decent fraction of common packages in the Rust ecosystem seemingly still rely on &lt;code&gt;nightly&lt;/code&gt; rather than &lt;code&gt;stable&lt;/code&gt;. Using Rust in production is already questionable given it&amp;rsquo;s novelty, and using the &lt;code&gt;nightly&lt;/code&gt; version of the compiler strikes me as a bridge too far. So Rocket&amp;rsquo;s out.&lt;/p&gt;

&lt;h3 id=&#34;rouille-and-pencil&#34;&gt;Rouille and Pencil&lt;/h3&gt;

&lt;p&gt;Rouille and Pencil are smaller frameworks, which aligns with my desire to do most of the programming and component selection myself rather than delegating to a monster framework like Rails or Django, so I tried them out next.  Both seem pretty immature though, so after getting my &lt;code&gt;hello-world&lt;/code&gt; servers up and running it seemed like I would have to build a &lt;em&gt;lot&lt;/em&gt; myself. At that point the impedance mismatch between my code and the framework makes me want to just write the framework part myself as well. Scratch these two off the list.&lt;/p&gt;

&lt;h3 id=&#34;nickel-and-iron&#34;&gt;Nickel and Iron&lt;/h3&gt;

&lt;p&gt;Nickel and Iron seem pretty similar, with more of a batteries-included philosophy then Rouille or Pencil. Iron seems more mature and seems to have more development activity around it, so I picked Iron (sorry Nickel).&lt;/p&gt;

&lt;p&gt;I got templating working with &lt;a href=&#34;https://github.com/sunng87&#34; target=&#34;_blank&#34;&gt;handlebars-iron&lt;/a&gt;, and was messing around with sessions and forms when I stumbled upon a bug I could not solve. Implementing &lt;a href=&#34;https://en.wikipedia.org/wiki/Post/Redirect/Get&#34; target=&#34;_blank&#34;&gt;Post/Redirect/Get&lt;/a&gt; resulted in something in the stack (I&amp;rsquo;m not sure if it was &lt;a href=&#34;https://github.com/hyperium/hyper&#34; target=&#34;_blank&#34;&gt;Hyper&lt;/a&gt; or Iron) parsing the incoming GET request as &lt;code&gt;Method::Extension(user=USERNAME&amp;amp;password=PASSWDGET)&lt;/code&gt;, rather than what I would expect &lt;code&gt;Method::Get&lt;/code&gt;. It looks like Iron is interpreting the form data as part of the method? Forms a pretty common part of a web app, one would think they would work pretty well. Iron includes handlers to redirect, and a &lt;code&gt;url_for&lt;/code&gt; function to find the address of routes. After a couple of days of not being able to find a problem on my end, I gave up on Iron. The next step was to start debugging &lt;a href=&#34;https://ironframework.io&#34; target=&#34;_blank&#34;&gt;Iron&lt;/a&gt; and &lt;a href=&#34;https://github.com/hyperium/hyper&#34; target=&#34;_blank&#34;&gt;Hyper&lt;/a&gt; code to figure out why they&amp;rsquo;re not parsing the http request correctly, and pretty much the whole point of a framework is to avoid parsing request headers yourself. You can check out the final state of my iron experiment &lt;a href=&#34;https://github.com/esnowkropla/iron_test&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;; it&amp;rsquo;s pretty functional, and the P/R/G problem is reasonably well illustrated because the code is so small.&lt;/p&gt;

&lt;h2 id=&#34;pure-hyper&#34;&gt;Pure Hyper&lt;/h2&gt;

&lt;p&gt;At this point I figured that for a simple CRUD app I don&amp;rsquo;t necessarily need a complete web framework, maybe I can just work off of a bare HTTP server. I have already briefly mentioned &lt;a href=&#34;https://hyper.rs/&#34; target=&#34;_blank&#34;&gt;Hyper&lt;/a&gt;; it appears to be THE http server for Rust. After getting it set up and running through the tutorials though, I was confounded by complexity of the traits that are required to be implemented for fielding requests; Hyper appears to be in transition between blocking and async io, and the user interface is still a little hairy. In particular I&amp;rsquo;m going to need global mutable state at some point (the database), and getting the borrowing working correctly was proving more finicky than I would like.&lt;/p&gt;

&lt;p&gt;It was at this point that I considered going below even Hyper, and writing the HTTP server myself from scratch. This is silly; if I want to get anything done I shouldn&amp;rsquo;t rewrite the whole stack myself. The other alternative would be to abandon Rust and just play around with Flask; I could at least build my web apps, even if I wasn&amp;rsquo;t playing with a new(ish) language.&lt;/p&gt;

&lt;p&gt;Luckily for me though, as I was searching around for the solution to my latest problem I saw a code example of &lt;a href=&#34;https://rocket.rs&#34; target=&#34;_blank&#34;&gt;Rocket&lt;/a&gt;, which I had so quickly dismissed before; and I liked what I saw! Request routing, sessions handling, state handling, with a heavy emphasis on developer experience. A fair bit of magic in the code generation to handle the routing, but implementing the traits in the request guards and the serialization was REALLY easy. Converted, I started up a new project and threw Rocket into the Cargo.toml. This is long enough, so we&amp;rsquo;ll leave off here; next week, actually building things!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Recessional</title>
      <link>http://ejsk.ca/post/recessional/</link>
      <pubDate>Mon, 10 Jul 2017 10:08:05 -0400</pubDate>
      
      <guid>http://ejsk.ca/post/recessional/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;God of our fathers, known of old,
Lord of our far-flung battle line,
Beneath whose awful hand we hold
Dominion over palm and pine -
Lord God of Hosts, be with us yet,
Lest we forget - lest we forget!

The tumult and the shouting dies;
The Captains and the Kings depart:
Still stands thine ancient sacrifice,
An humble and a contrite heart.
Lord God of Hosts, be with us yet,
Lest we forget - lest we forget!

Far-called our navies melt away;
On dune and headland sinks the fire:
Lo, all our pomp of yesterday
Is one with Nineveh and Tyre!
Judge of the Nations, spare us yet,
Lest we forget - lest we forget!

If, drunk with sight of power, we loose
Wild tongues that have not Thee in awe,
Such boastings as the Gentiles use,
Or lesser breeds without the Law -
Lord God of Hosts, be with us yet,
Lest we forget - lest we forget!

For heathen heart that puts her trust
In reeking tube and iron shard,
All valiant dust that builds on dust,
And guarding calls not Thee to guard,
For frantic boast and foolish word-
Thy Mercy on Thy People, Lord!

-Rudyard Kipling
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Excelsior</title>
      <link>http://ejsk.ca/post/excelsior/</link>
      <pubDate>Mon, 10 Jul 2017 09:48:29 -0400</pubDate>
      
      <guid>http://ejsk.ca/post/excelsior/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;The shades of night were falling fast,
As through an Alpine village passed
A youth, who bore, &#39;mid snow and ice,
A banner with the strange device,
    Excelsior!
	
His brow was sad; his eye beneath,
Flashed like a falchion from its sheath,
And like a silver clarion rung
The accents of that unknown tongue,
    Excelsior!

In happy homes he saw the light
Of household fires gleam warm and bright;
Above, the spectral glaciers shone,
And from his lips escaped a groan,
    Excelsior!

&amp;quot;Try not the Pass!&amp;quot; the old man said;
&amp;quot;Dark lowers the tempest overhead,
The roaring torrent is deep and wide!&amp;quot;
And loud that clarion voice replied,
    Excelsior!

&amp;quot;Oh stay,&amp;quot; the maiden said, &amp;quot;and rest
They weary head upon this breast!&amp;quot;
A tear stood in his bright blue eye,
But still he answered, with a sigh,
    Excelsior!

&amp;quot;Beware the pine-tree&#39;s withered branch!
Beware the awful avalanche!&amp;quot;
This was the peasant&#39;s last Good-night,
A voice replied, far up the height,
    Excelsior!

At break of day, as heavenward
The pious monks of Saint Bernard
Uttered the oft-repeated prayer,
A voice cried through the startled air,
    Excelsior!

A traveller, by the faithful hound,
Half-buried in the snow was found,
Still grasping in his hand of ice
That banner with the strange device,
    Excelsior!

There in the twilight cold and gray,
Lifeless, but beautiful, he lay,
And from the sky, serene and far,
A voice fell like a falling star,
    Excelsior!

-Longfellow
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>First Blog Entry</title>
      <link>http://ejsk.ca/post/first-blog-entry/</link>
      <pubDate>Fri, 07 Jul 2017 17:17:40 -0400</pubDate>
      
      <guid>http://ejsk.ca/post/first-blog-entry/</guid>
      <description>&lt;p&gt;Alright, I&amp;rsquo;ve rejiggered my website yet again.  This actually has some functionality, so maybe I&amp;rsquo;ll actually manage to stick to it this time.  Then again, the mark of a true academic is to neglect their website.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
