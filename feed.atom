<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <link rel="self" href="https://www.kropla.ca/feed.atom"/>
  <author>
    <name>Elliot Snow-Kropla</name>
    <email>elliot@kropla.ca</email>
  </author>
  <id>https://www.kropla.ca/</id>
  <title>Elliot Snow-Kropla</title>
  <updated>2024-07-05T01:40:48.297388Z</updated>
  <entry>
    <link rel="alternate" href="/posts/church-going.html"/>
    <content type="html">

&lt;pre&gt;
&lt;code&gt;
Once I am sure there's nothing going on
I step inside, letting the door thud shut.
Another church: matting, seats, and stone
And little books; sprawlings of flowers, cut
For Sunday, brownish now; some brass and stuff
Up at the holy end; the small neat organ;
And a tense, musty, unignorable silence,
Brewed God knows how long. Hatless, I take off
My cycle-clips in awkward reverence.

Move forward, run my hand around the font.
From where I stand, the roof looks almost new -
Cleaned, or restored? Someone would know: I don't.
Mounting the lectern, I peruse a few
Hectoring large-scale verses, and pronounce
'Here endeth' much more loudly than I'd meant.
The echoes snigger briefly. Back at the door
I sign the book, donate an Irish sixpence,
Reflect the place was not worth stopping for. 

Yet stop I did: in fact I often do,
And always end much at a loss like this,
Wondering what to look for; wondering, too,
When churches will fall completely out of use
What we shall turn them into, if we shall keep
A few cathedrals chronically on show,
Their parchment, plate and pyx in locked cases,
And let the rest rent-free to rain and sheep.
Shall we avoid them as unlucky places? 

Or, after dark, will dubious women come
To make their children touch a particular stone;
Pick simples for a cancer; or on some
Advised night see walking a dead one?
Power of some sort will go on
In games, in riddles, seemingly at random;
But superstition, like belief, must die,
And what remains when disbelief has gone?
Grass, weedy pavement, brambles, buttress, sky, 

A shape less recognisable each week,
A purpose more obscure. I wonder who
Will be the last, the very last, to seek
This place for what it was; one of the crew
That tap and jot and know what rood-lofts were?
Some ruin-bibber, randy for antique,
Or Christmas-addict, counting on a whiff
Of gown-and-bands and organ-pipes and myrrh?
Or will he be my representative, 

Bored, uninformed, knowing the ghostly silt
Dispersed, yet tending to this cross of ground
Through suburb scrub because it held unspilt
So long and equably what since is found
Only in separation - marriage, and birth,
And death, and thoughts of these - for which was built 
This special shell? For, though I've no idea
What this accoutred frowsty barn is worth
It pleases me to stand in silence here;

A serious house on serious earth it is,
In whose blent air all our compulsions meet,
Are recognized, and robed as destinies,
And that much never can be obsolete,
Since someone will forever be surprising
A hunger in himself to be more serious,
And gravitating with it to this ground,
Which, he once heard, was proper to grow wise in,
If only that so many dead lie round.

-Philip Larkin
&lt;/code&gt;
&lt;/pre&gt;
</content>
    <id>https://www.kropla.ca/posts/church-going.html</id>
    <title>Church Going</title>
    <updated>2020-06-16T23:26:29Z</updated>
  </entry>
  <entry>
    <link rel="alternate" href="/posts/rust-web3.html"/>
    <content type="html">

The plan here is to examine a simple webserver that echos back the contents of requests as HTML. The purpose is to compare how you would do this in Rust vs Python, and what static typing and lifetimes and all the things Rust gives you feel from a programmer ergonomics standpoint compared to the equivalent in Python.  This is just some example toy code, and obviously not spec compliant&lt;%= side_note("sn-spec") do %&gt;You should read &lt;a href="https://tools.ietf.org/html/rfc2616#section-5.1"&gt;the spec&lt;/a&gt; though! It's actually pretty straightforward, and learning things properly is a good thing.&lt;% end %&gt;
, but hopefully it illustrates some of the things that I think about programming languages.

## Server Structure

The basic binary code is just [this](https://github.com/esnowkropla/rusty-web/blob/master/src/bin/main.rs):
```rust
extern crate rusty_web;

use rusty_web::server;

fn main() {
    server();
}
```

which loads the function `server` from our library and kicks it off.  The `server` function looks like [this](https://github.com/esnowkropla/rusty-web/blob/master/src/lib.rs):

```rust
fn handle_connection(mut stream: TcpStream) {
    let mut buff = String::new();
    stream.read_to_string(&amp;mut buff).unwrap();
    let request = Request::new(&amp;buff);
    println!("{:?}", buff);
    println!("{:?}", request);
}

pub fn server() {
    let listener = TcpListener::bind("127.0.0.1:8000").unwrap();

    for stream in listener.incoming() {
        handle_connection(stream.unwrap());
    }
}
```
to make this example a little less trivial, let's give the server two behaviours rather than one: If a GET request comes in, we'll respond with an HTML version of the request, and if a POST request comes in, we'll respond with a JSON object containing the form data.
</content>
    <id>https://www.kropla.ca/posts/rust-web3.html</id>
    <title>A Rust Webserver</title>
    <updated>2018-09-01T17:32:47Z</updated>
  </entry>
  <entry>
    <link rel="alternate" href="/posts/redrose.html"/>
    <content type="html">

&lt;pre&gt;
&lt;code&gt;
O my Luve's like a red, red rose
That’s newly sprung in june;
O my Luve's like the melodie
That’s sweetly play'd in tune:

As fair art thou, my bonnie lass,
So deep in luve am I:
And I will luve thee still, my dear,
Till a’ the seas gang dry:

Till a’ the seas gang dry, my dear,
And the rocks melt wi’ the sun:
I will luve thee still, my dear,
While the sands o’ life shall run.

And fare thee weel, my only Luve
And fare thee weel, a while!
And I will come again, my Luve,
Tho’ it were ten thousand mile.
&lt;/code&gt;
&lt;/pre&gt;
</content>
    <id>https://www.kropla.ca/posts/redrose.html</id>
    <title>A Red, Red Rose</title>
    <updated>2018-08-02T01:02:08Z</updated>
  </entry>
  <entry>
    <link rel="alternate" href="/posts/summer-lightning.html"/>
    <content type="html">

A certain critic - for such men, I may regret to say, do exist - made
the nasty remark about my last novel that it contained 'all the old
Wodehouse characters under different names'. He has probably
now been eaten by bears, like the children who made mock of
the prophet Elisha: but if he still survives he will not be to
make a similar charge against *Summer Lightning*. With my
superior intelligence, I have outgeneralled the man this time
by putting in all the old Wodehouse characters under the same
names.  Pretty silly it will make him feel, I rather fancy.
</content>
    <id>https://www.kropla.ca/posts/summer-lightning.html</id>
    <title>Summer Lightning</title>
    <updated>2018-03-10T01:02:08Z</updated>
  </entry>
  <entry>
    <link rel="alternate" href="/posts/rust-web2.html"/>
    <content type="html">

This entry will be a little scattershot, just some miscellaneous thoughts and impressions.

## Interacting with APIs
It's a little inconvenient to be making a lot of little structs for each feature of an API; where in JavaScript or Python you would have a dictionary, if you want type safety you need to make a struct with the proper fields. Strictly speaking you don't *need* to; operating on [untyped JSON](https://docs.serde.rs/serde_json/#operating-on-untyped-json-values) is actually fairly straightforward, but when you know that the rest of your codebase isn't going to crash the parts that aren't guarenteed by the compiler niggle in your brain.  The [serde-rs](https://github.com/serde-rs/json) library is everything I want in a JSON serialization library. There's not much in particular to call out, which is good in an infrastructure library; although I can say it's ... much more ergonomic than the serialization I wrote for [Hairy Little Buggers](http://www.hairylittlebuggers.com).

I wrote about half a dozen little programs to scrape data from YouTube and Twitch as part of [secret project](http://www.this link doesn't go anywhere dot com), as well as the main app; I would probably do one-off scraping type scripts in Python in future, with app code written in Rust.

## Type Safety!
Rust's type safety gives is extremely hard to give up; working with Python I constantly have to think harder about the inputs and outputs of my functions, becase the source and compiler isn't doing it for me. 
</content>
    <id>https://www.kropla.ca/posts/rust-web2.html</id>
    <title>Thoughts on Rust Web-Development</title>
    <updated>2017-10-28T22:32:47Z</updated>
  </entry>
  <entry>
    <link rel="alternate" href="/posts/rust-web.html"/>
    <content type="html">
Now that [Hairy Little Buggers](http://store.steampowered.com/app/405240) is wrapped up, I figured I'd use my sabbatical to dive into web-development. This is also a good chance to play with [Rust](http://rust-lang.org) again; the last time I checked it out was before 1.0 when I was playing with the [Matasano crypto challenges](http://cryptopals.com/), so it will be interesting to see how much more mature the ecosystem is.

Now, I don't really know anything about web-development, so after a little research I picked up [Flask Web Development](https://www.amazon.ca/Flask-Web-Development-Developing-Applications/dp/1449372627/ref=sr_1_sc_1?ie=UTF8&amp;qid=1501866858&amp;sr=8-1-spell) based on the [Flask Mega-Tutorial](https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world). I know Python fairly well so I can mentally translate the Python into Rust, and [Flask](http://flask.pocoo.org) seems like the framework I would pick were I to write a web app in Python. 

## Framework Selection
Much as I love writing everything myself, sometimes it makes sense to stand on the shoulders of giants. A combination of browsing the rust sub-reddit and searching the web suggested five initial candidates for a web framework:
[Nickel](https://github.com/nickel-org/nickel.rs), 
[Iron](https://ironframework.io), 
[Rocket](https://rocket.rs), 
[Rouille](https://github.com/tomaka/rouille), and 
[Pencil](https://github.com/fengsp/pencil). The following is just my own personal experiences with each framework, and is definitely not meant to be the definitive objective guide to web developent in Rust. In particular, these are my fickle first impressions and snap judgements. Do your own research!

### Rocket
Rocket requires the use of the `nightly` compiler, which annoys me.  A pretty decent fraction of common packages in the Rust ecosystem seemingly still rely on `nightly` rather than `stable`. Using Rust in production is already questionable given it's novelty, and using the `nightly` version of the compiler strikes me as a bridge too far. So Rocket's out.

### Rouille and Pencil
Rouille and Pencil are smaller frameworks, which aligns with my desire to do most of the programming and component selection myself rather than delegating to a monster framework like Rails or Django, so I tried them out next.  Both seem pretty immature though, so after getting my `hello-world` servers up and running it seemed like I would have to build a *lot* myself. At that point the impedance mismatch between my code and the framework makes me want to just write the framework part myself as well. Scratch these two off the list.

### Nickel and Iron
Nickel and Iron seem pretty similar, with more of a batteries-included philosophy then Rouille or Pencil. Iron seems more mature and seems to have more development activity around it, so I picked Iron (sorry Nickel).

I got templating working with [handlebars-iron](https://github.com/sunng87), and was messing around with sessions and forms when I stumbled upon a bug I could not solve. Implementing [Post/Redirect/Get](https://en.wikipedia.org/wiki/Post/Redirect/Get) resulted in something in the stack (I'm not sure if it was [Hyper](https://github.com/hyperium/hyper) or Iron) parsing the incoming GET request as `Method::Extension(user=USERNAME&amp;password=PASSWDGET)`, rather than what I would expect `Method::Get`. It looks like Iron is interpreting the form data as part of the method? Forms a pretty common part of a web app, one would think they would work pretty well. Iron includes handlers to redirect, and a `url_for` function to find the address of routes. After a couple of days of not being able to find a problem on my end, I gave up on Iron. The next step was to start debugging [Iron](https://ironframework.io) and [Hyper](https://github.com/hyperium/hyper) code to figure out why they're not parsing the http request correctly, and pretty much the whole point of a framework is to avoid parsing request headers yourself. You can check out the final state of my iron experiment [here](https://github.com/esnowkropla/iron_test); it's pretty functional, and the P/R/G problem is reasonably well illustrated because the code is so small.

## Pure Hyper
At this point I figured that for a simple CRUD app I don't necessarily need a complete web framework, maybe I can just work off of a bare HTTP server. I have already briefly mentioned [Hyper](https://hyper.rs/); it appears to be THE http server for Rust. After getting it set up and running through the tutorials though, I was confounded by complexity of the traits that are required to be implemented for fielding requests; Hyper appears to be in transition between blocking and async io, and the user interface is still a little hairy. In particular I'm going to need global mutable state at some point (the database), and getting the borrowing working correctly was proving more finicky than I would like.

It was at this point that I considered going below even Hyper, and writing the HTTP server myself from scratch. This is silly; if I want to get anything done I shouldn't rewrite the whole stack myself. The other alternative would be to abandon Rust and just play around with Flask; I could at least build my web apps, even if I wasn't playing with a new(ish) language.

Luckily for me though, as I was searching around for the solution to my latest problem I saw a code example of [Rocket](https://rocket.rs), which I had so quickly dismissed before; and I liked what I saw! Request routing, sessions handling, state handling, with a heavy emphasis on developer experience. A fair bit of magic in the code generation to handle the routing, but implementing the traits in the request guards and the serialization was REALLY easy. Converted, I started up a new project and threw Rocket into the Cargo.toml. This is long enough, so we'll leave off here; next week, actually building things!
</content>
    <id>https://www.kropla.ca/posts/rust-web.html</id>
    <title>Rust Web-Development, Part 1</title>
    <updated>2017-08-04T14:43:49Z</updated>
  </entry>
  <entry>
    <link rel="alternate" href="/posts/campus.html"/>
    <content type="html">
Background material:

  * [Review of Angela Nagle's 'Kill all normies'](http://nymag.com/selectall/2017/07/angela-nagles-kill-all-normies-the-alt-right-and-4chan.html)
  * [Video of Evergreen University student protests](https://www.youtube.com/watch?v=2cMYfxOFBBM)
</content>
    <id>https://www.kropla.ca/posts/campus.html</id>
    <title>Which side are we on?</title>
    <updated>2017-07-14T17:31:12Z</updated>
  </entry>
  <entry>
    <link rel="alternate" href="/posts/recessional.html"/>
    <content type="html">

```text
God of our fathers, known of old,
Lord of our far-flung battle line,
Beneath whose awful hand we hold
Dominion over palm and pine -
Lord God of Hosts, be with us yet,
Lest we forget - lest we forget!

The tumult and the shouting dies;
The Captains and the Kings depart:
Still stands thine ancient sacrifice,
An humble and a contrite heart.
Lord God of Hosts, be with us yet,
Lest we forget - lest we forget!

Far-called our navies melt away;
On dune and headland sinks the fire:
Lo, all our pomp of yesterday
Is one with Nineveh and Tyre!
Judge of the Nations, spare us yet,
Lest we forget - lest we forget!

If, drunk with sight of power, we loose
Wild tongues that have not Thee in awe,
Such boastings as the Gentiles use,
Or lesser breeds without the Law -
Lord God of Hosts, be with us yet,
Lest we forget - lest we forget!

For heathen heart that puts her trust
In reeking tube and iron shard,
All valiant dust that builds on dust,
And guarding calls not Thee to guard,
For frantic boast and foolish word-
Thy Mercy on Thy People, Lord!

-Rudyard Kipling
```
</content>
    <id>https://www.kropla.ca/posts/recessional.html</id>
    <title>Recessional</title>
    <updated>2017-07-10T14:08:05Z</updated>
  </entry>
  <entry>
    <link rel="alternate" href="/posts/excelsior.html"/>
    <content type="html">

&lt;pre&gt;
&lt;code&gt;
The shades of night were falling fast,
As through an Alpine village passed
A youth, who bore, 'mid snow and ice,
A banner with the strange device,
    Excelsior!
	
His brow was sad; his eye beneath,
Flashed like a falchion from its sheath,
And like a silver clarion rung
The accents of that unknown tongue,
    Excelsior!

In happy homes he saw the light
Of household fires gleam warm and bright;
Above, the spectral glaciers shone,
And from his lips escaped a groan,
    Excelsior!

"Try not the Pass!" the old man said;
"Dark lowers the tempest overhead,
The roaring torrent is deep and wide!"
And loud that clarion voice replied,
    Excelsior!

"Oh stay," the maiden said, "and rest
They weary head upon this breast!"
A tear stood in his bright blue eye,
But still he answered, with a sigh,
    Excelsior!

"Beware the pine-tree's withered branch!
Beware the awful avalanche!"
This was the peasant's last Good-night,
A voice replied, far up the height,
    Excelsior!

At break of day, as heavenward
The pious monks of Saint Bernard
Uttered the oft-repeated prayer,
A voice cried through the startled air,
    Excelsior!

A traveller, by the faithful hound,
Half-buried in the snow was found,
Still grasping in his hand of ice
That banner with the strange device,
    Excelsior!

There in the twilight cold and gray,
Lifeless, but beautiful, he lay,
And from the sky, serene and far,
A voice fell like a falling star,
    Excelsior!

-Longfellow
&lt;/code&gt;
&lt;/pre&gt;
</content>
    <id>https://www.kropla.ca/posts/excelsior.html</id>
    <title>Excelsior</title>
    <updated>2017-07-10T13:48:29Z</updated>
  </entry>
  <entry>
    <link rel="alternate" href="/posts/first-blog-entry.html"/>
    <content type="html">
Alright, I've rejiggered my website yet again.  This actually has some functionality, so maybe I'll actually manage to stick to it this time.  Then again, the mark of a true academic is to neglect their website.
</content>
    <id>https://www.kropla.ca/posts/first-blog-entry.html</id>
    <title>First Blog Entry</title>
    <updated>2017-07-07T21:17:40Z</updated>
  </entry>
</feed>