<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <link rel="self" href="https://www.kropla.ca/feed.atom"/>
  <author>
    <name>Elliot Snow-Kropla</name>
    <email>elliot@kropla.ca</email>
  </author>
  <id>https://www.kropla.ca/</id>
  <title>Elliot Snow-Kropla</title>
  <updated>2025-03-18T13:39:36.964044Z</updated>
  <entry>
    <link rel="alternate" href="/posts/musquodoboit-harbour-trip.html"/>
    <content type="html">&lt;article&gt;
  &lt;h1&gt;&lt;a href="/posts/musquodoboit-harbour-trip.html"&gt;Musquodoboit Harbour Trip&lt;/a&gt;&lt;/h1&gt;
  &lt;p class="subtitle"&gt;2024-08-11&lt;/p&gt;
  &lt;small&gt;
    
      &lt;a href="/tags/family"&gt;family&lt;/a&gt;
    
      &lt;a href="/tags/photos"&gt;photos&lt;/a&gt;
    
  &lt;/small&gt;
  &lt;section&gt;
    &lt;p&gt;
For a slightly belated birthday trip for me we drove out to Musquodoboit Harbour, since Kim hadn’t explored the Eastern Shore at all before.&lt;/p&gt;
&lt;figure&gt;
    &lt;label class="margin-toggle" for="sn-market"&gt;⊕&lt;/label&gt;
&lt;input id="sn-market" class="margin-toggle" type="checkbox"/&gt;
&lt;span class="marginnote"&gt;

  Musquodoboit Harbour farmer's market.

&lt;/span&gt;
  &lt;img class="photo" src="/img/musq-2024-08-11/musq-1-small.jpg" /&gt;&lt;/figure&gt;
&lt;p&gt;
We checked out the farmer’s market, which had a lot of cute vendors and some lovely music in the park.  We had fish and chips for lunch at &lt;a href="https://www.facebook.com/profile.php?id=100057378222408"&gt;Harbour Fish n Fries&lt;/a&gt; which Kim said was the best battered fish she’d ever had.  She remains consistently surprised at the quality of the fish in Nova Scotia - I figure there’s got to be some compensation for being stuck off of the dege of the continent into the middle of the ocean.&lt;/p&gt;
&lt;figure&gt;
    &lt;label class="margin-toggle" for="sn-market5"&gt;⊕&lt;/label&gt;
&lt;input id="sn-market5" class="margin-toggle" type="checkbox"/&gt;
&lt;span class="marginnote"&gt;

  Fish and Chips at &lt;a href="https://www.facebook.com/profile.php?id=100057378222408"&gt;Harbour Fish N Fries&lt;/a&gt;.

&lt;/span&gt;
  &lt;img class="photo" src="/img/musq-2024-08-11/musq-5-small.jpg" /&gt;&lt;/figure&gt;
&lt;p&gt;
The farmer’s market takes place next to the old train station, now in use as a museum and the local HRM consituency office since we’ve ripped up the train tracks.&lt;/p&gt;
&lt;figure&gt;
    &lt;label class="margin-toggle" for="sn-market6"&gt;⊕&lt;/label&gt;
&lt;input id="sn-market6" class="margin-toggle" type="checkbox"/&gt;
&lt;span class="marginnote"&gt;

  The gorgeous old train station.  It would have been wonderful to have taken the train out here, like we could have one hundred years ago.  Sad!

&lt;/span&gt;
  &lt;img class="photo" src="/img/musq-2024-08-11/musq-6-small.jpg" /&gt;&lt;/figure&gt;
&lt;figure&gt;
    &lt;label class="margin-toggle" for="sn-market3"&gt;⊕&lt;/label&gt;
&lt;input id="sn-market3" class="margin-toggle" type="checkbox"/&gt;
&lt;span class="marginnote"&gt;

  Freddie inspecting the lobster traps.

&lt;/span&gt;
  &lt;img class="photo" src="/img/musq-2024-08-11/musq-3-small.jpg" /&gt;&lt;/figure&gt;
&lt;figure&gt;
    &lt;label class="margin-toggle" for="sn-market4"&gt;⊕&lt;/label&gt;
&lt;input id="sn-market4" class="margin-toggle" type="checkbox"/&gt;
&lt;span class="marginnote"&gt;

  Riding on Papa after the little legs have given out.

&lt;/span&gt;
  &lt;img class="photo" src="/img/musq-2024-08-11/musq-4-small.jpg" /&gt;&lt;/figure&gt;
&lt;p&gt;
Rounded off the trip with some ice cream.  A great day all round, even if we were a little late back for nap time.&lt;/p&gt;
&lt;figure&gt;
    &lt;label class="margin-toggle" for="sn-market2"&gt;⊕&lt;/label&gt;
&lt;input id="sn-market2" class="margin-toggle" type="checkbox"/&gt;
&lt;span class="marginnote"&gt;

  Pointing the way to &lt;a href="https://www.facebook.com/PolarBearExpressIceCream"&gt;Polar Bear Express&lt;/a&gt; ice cream.

&lt;/span&gt;
  &lt;img class="photo" src="/img/musq-2024-08-11/musq-2-small.jpg" /&gt;&lt;/figure&gt;


    &lt;p class="links"&gt;
    
      &lt;a href="/posts/connect_to_postgres_socket.html"&gt;
        &lt;small&gt;
          &amp;laquo;Connecting to postgres via a socket
        &lt;/small&gt;
      &lt;/a&gt;
    
    
    &lt;/p&gt;
  &lt;/section&gt;
&lt;/article&gt;
</content>
    <id>https://www.kropla.ca/posts/musquodoboit-harbour-trip.html</id>
    <title>Musquodoboit Harbour Trip</title>
    <updated>2024-08-11T19:31:56.925963Z</updated>
  </entry>
  <entry>
    <link rel="alternate" href="/posts/connect_to_postgres_socket.html"/>
    <content type="html">&lt;article&gt;
  &lt;h1&gt;&lt;a href="/posts/connect_to_postgres_socket.html"&gt;Connecting to postgres via a socket&lt;/a&gt;&lt;/h1&gt;
  &lt;p class="subtitle"&gt;2024-08-01&lt;/p&gt;
  &lt;small&gt;
    
      &lt;a href="/tags/elixir"&gt;elixir&lt;/a&gt;
    
      &lt;a href="/tags/programming"&gt;programming&lt;/a&gt;
    
  &lt;/small&gt;
  &lt;section&gt;
    &lt;p&gt;
For my side projects, I like to share one instance of postgres and connect to it over a socket, rather than fiddling with usernames and passwords or running dockerized postgres for each project or anything like that.  If you’ve &lt;code class="inline"&gt;apt install&lt;/code&gt;ed your postgres you also don’t have to mess with &lt;code class="inline"&gt;pg_hba.conf&lt;/code&gt; to allow connections unlike with user/pass auth (has that changed since I learned this?  I don’t know).&lt;/p&gt;
&lt;p&gt;
For an elixir project using Ecto, it’s not trivially obvious from the docs how to configure a socket connection rather than user/pass - the diff to &lt;code class="inline"&gt;config/dev.exs&lt;/code&gt; (and matching change to &lt;code class="inline"&gt;config/test.exs&lt;/code&gt;) you’ll want looks like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;--- a/config/dev.exs
+++ b/config/dev.exs
@@ -2,9 +2,7 @@ import Config

 # Configure your database
 config :rk, Project.Repo,
-  username: &quot;postgres&quot;,
-  password: &quot;postgres&quot;,
-  hostname: &quot;localhost&quot;,
+  socket_dir: &quot;/var/run/postgresql&quot;,
   database: &quot;project_dev&quot;,
   stacktrace: true,
   show_sensitive_data_on_connection_error: true,
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Posted here so that &lt;em&gt;I&lt;/em&gt; won’t need to go hunting around for this again in the future.&lt;/p&gt;


    &lt;p class="links"&gt;
    
      &lt;a href="/posts/2024-family-update.html"&gt;
        &lt;small&gt;
          &amp;laquo;2024 Family Update
        &lt;/small&gt;
      &lt;/a&gt;
    
    
      &lt;a href="/posts/musquodoboit-harbour-trip.html"&gt;
        &lt;small&gt;
          Musquodoboit Harbour Trip&amp;raquo;
        &lt;/small&gt;
      &lt;/a&gt;
    
    &lt;/p&gt;
  &lt;/section&gt;
&lt;/article&gt;
</content>
    <id>https://www.kropla.ca/posts/connect_to_postgres_socket.html</id>
    <title>Connecting to postgres via a socket</title>
    <updated>2024-08-01T14:25:22.588561Z</updated>
  </entry>
  <entry>
    <link rel="alternate" href="/posts/2024-family-update.html"/>
    <content type="html">&lt;article&gt;
  &lt;h1&gt;&lt;a href="/posts/2024-family-update.html"&gt;2024 Family Update&lt;/a&gt;&lt;/h1&gt;
  &lt;p class="subtitle"&gt;2024-07-05&lt;/p&gt;
  &lt;small&gt;
    
      &lt;a href="/tags/family"&gt;family&lt;/a&gt;
    
      &lt;a href="/tags/photos"&gt;photos&lt;/a&gt;
    
  &lt;/small&gt;
  &lt;section&gt;
    &lt;p&gt;
I started this site as a place to stash my resume, but now I can use it to show of pictures of my family as well.  When I first put this up I didn’t have one, but now my family is a wife and &lt;em&gt;two&lt;/em&gt; children.  I am blessed.&lt;/p&gt;
&lt;figure&gt;
    &lt;label class="margin-toggle" for="sn-mina"&gt;⊕&lt;/label&gt;
&lt;input id="sn-mina" class="margin-toggle" type="checkbox"/&gt;
&lt;span class="marginnote"&gt;

  Mina at two and a half, enjoying summertime at the playground.

&lt;/span&gt;
  &lt;img class="photo" src="/img/family-2024-07/mina-playground-2024-07.jpg" /&gt;&lt;/figure&gt;
&lt;figure&gt;
    &lt;label class="margin-toggle" for="sn-freddie"&gt;⊕&lt;/label&gt;
&lt;input id="sn-freddie" class="margin-toggle" type="checkbox"/&gt;
&lt;span class="marginnote"&gt;

  Freddie at one year old, rocking his parakeet look.

&lt;/span&gt;
  &lt;img class="photo" src="/img/family-2024-07/freddie-parakeet.jpg" /&gt;&lt;/figure&gt;
&lt;figure&gt;
    &lt;label class="margin-toggle" for="sn-elliot"&gt;⊕&lt;/label&gt;
&lt;input id="sn-elliot" class="margin-toggle" type="checkbox"/&gt;
&lt;span class="marginnote"&gt;

  I have no idea where he gets it from.

&lt;/span&gt;
  &lt;img class="photo" src="/img/family-2024-07/elliot-parakeet.jpg" /&gt;&lt;/figure&gt;


    &lt;p class="links"&gt;
    
      &lt;a href="/posts/lunenberg-birthday-trip.html"&gt;
        &lt;small&gt;
          &amp;laquo;Lunenberg Birthday Trip
        &lt;/small&gt;
      &lt;/a&gt;
    
    
      &lt;a href="/posts/connect_to_postgres_socket.html"&gt;
        &lt;small&gt;
          Connecting to postgres via a socket&amp;raquo;
        &lt;/small&gt;
      &lt;/a&gt;
    
    &lt;/p&gt;
  &lt;/section&gt;
&lt;/article&gt;
</content>
    <id>https://www.kropla.ca/posts/2024-family-update.html</id>
    <title>2024 Family Update</title>
    <updated>2024-07-05T01:50:54.475954Z</updated>
  </entry>
  <entry>
    <link rel="alternate" href="/posts/lunenberg-birthday-trip.html"/>
    <content type="html">&lt;article&gt;
  &lt;h1&gt;&lt;a href="/posts/lunenberg-birthday-trip.html"&gt;Lunenberg Birthday Trip&lt;/a&gt;&lt;/h1&gt;
  &lt;p class="subtitle"&gt;2024-06-29&lt;/p&gt;
  &lt;small&gt;
    
      &lt;a href="/tags/family"&gt;family&lt;/a&gt;
    
      &lt;a href="/tags/photos"&gt;photos&lt;/a&gt;
    
  &lt;/small&gt;
  &lt;section&gt;
    &lt;p&gt;
For Kim’s 34th birthday we drove the kids down to &lt;a href="https://en.wikipedia.org/wiki/Lunenburg,_Nova_Scotia"&gt;Lunenberg&lt;/a&gt;, since Kim had never been.  Our initial plan had been to hit &lt;a href="https://parks.novascotia.ca/park/rainbow-haven-beach"&gt;the beach&lt;/a&gt; but the weather was typically Nova Scotian grey, so we drove down the South Shore.  Growing up, my family assimilated very strongly to &lt;em&gt;Nova Scotian Distance&lt;/em&gt; - that is, any place for than a half hour drive away might as well be the moon - so I’ve only been once or twice, and not since I was a child.&lt;/p&gt;
&lt;figure&gt;
    &lt;label class="margin-toggle" for="mn-the-bay"&gt;⊕&lt;/label&gt;
&lt;input id="mn-the-bay" class="margin-toggle" type="checkbox"/&gt;
&lt;span class="marginnote"&gt;

  The view out across the water from downtown.

&lt;/span&gt;
  &lt;img class="photo" src="/img/lunenberg-2024-06-29/the-bay.jpg" /&gt;&lt;/figure&gt;
&lt;p&gt;
Lunenberg was delightful - lots of colourful picturesque Maritime buildings, narrow hilly streets, a view of the bay.  Going with small children is definitely the way to do it - I recall being bored as a twelve year old, but adults and toddlers both like walking around beautiful buildings while drinking coffee/hot chocolate.  We stopped in at the &lt;a href="https://laughingwhalecoffee.com/"&gt;Laughing Whale&lt;/a&gt; store - their coffee is widely available out east, but we’d never been to their physical location before.  They have a very cozy space - we would have sat and read there all morning if we didn’t have to wrangle two little ones.&lt;/p&gt;
&lt;figure&gt;
    &lt;label class="margin-toggle" for="mn-dory-racing"&gt;⊕&lt;/label&gt;
&lt;input id="mn-dory-racing" class="margin-toggle" type="checkbox"/&gt;
&lt;span class="marginnote"&gt;

  The Dory Racing Association

&lt;/span&gt;
  &lt;img class="photo" src="/img/lunenberg-2024-06-29/dory-assoc.jpg" /&gt;&lt;/figure&gt;
&lt;p&gt;
We happened across a race of the &lt;a href="https://www.facebook.com/CanadianDoryRacing/"&gt;Canadian Dory Racing Association&lt;/a&gt; down on the water, which was adorable.  Between that and the Model Yacht Club regatta we saw down at Sullivan’s Pond earlier this spring, we’ve had good fortune stumbling upon cute little civic insitutions.&lt;/p&gt;
&lt;p&gt;
My vague memory is of picturesque little tourist traps being pretty expensive, but our coffee and our lunch were both very reasonable by the standards of 2024.  Which is to say, expensive, but about what we’d spend in our neighbourhood nowadays.  I was craving fish and chips, and I was very satisfied to nibble on some while looking out over the harbour.&lt;/p&gt;
&lt;figure&gt;
    &lt;label class="margin-toggle" for="mn-fam"&gt;⊕&lt;/label&gt;
&lt;input id="mn-fam" class="margin-toggle" type="checkbox"/&gt;
&lt;span class="marginnote"&gt;

  The birthday girl herself.

&lt;/span&gt;
  &lt;img class="photo" src="/img/lunenberg-2024-06-29/fam.jpg" /&gt;&lt;/figure&gt;
&lt;p&gt;
And the &lt;em&gt;Bluenose II&lt;/em&gt; herself made an appearance just before we left!&lt;/p&gt;
&lt;figure&gt;
    &lt;label class="margin-toggle" for="mn-bluenose"&gt;⊕&lt;/label&gt;
&lt;input id="mn-bluenose" class="margin-toggle" type="checkbox"/&gt;
&lt;span class="marginnote"&gt;

  The last of the Grand Banks schooners, who fed so many men.

&lt;/span&gt;
  &lt;img class="photo" src="/img/lunenberg-2024-06-29/bluenose.jpg" /&gt;&lt;/figure&gt;
&lt;p&gt;
Kim seems to have had a pretty good time, which was the point.  We’re looking forward to our continuing series of day trips around Nova Scotia.  Our next targets are Windsor/Truro/Musquodoboit Harbour - I’d like to get down to Yarmouth at some point, but even recovering from &lt;em&gt;Nova Scotia Distance&lt;/em&gt; it is still &lt;em&gt;so&lt;/em&gt; far.  Some day!&lt;/p&gt;


    &lt;p class="links"&gt;
    
      &lt;a href="/posts/church-going.html"&gt;
        &lt;small&gt;
          &amp;laquo;Church Going
        &lt;/small&gt;
      &lt;/a&gt;
    
    
      &lt;a href="/posts/2024-family-update.html"&gt;
        &lt;small&gt;
          2024 Family Update&amp;raquo;
        &lt;/small&gt;
      &lt;/a&gt;
    
    &lt;/p&gt;
  &lt;/section&gt;
&lt;/article&gt;
</content>
    <id>https://www.kropla.ca/posts/lunenberg-birthday-trip.html</id>
    <title>Lunenberg Birthday Trip</title>
    <updated>2024-06-29T23:46:11.941043Z</updated>
  </entry>
  <entry>
    <link rel="alternate" href="/posts/church-going.html"/>
    <content type="html">&lt;article&gt;
  &lt;h1&gt;&lt;a href="/posts/church-going.html"&gt;Church Going&lt;/a&gt;&lt;/h1&gt;
  &lt;p class="subtitle"&gt;2020-06-16&lt;/p&gt;
  &lt;small&gt;
    
      &lt;a href="/tags/poetry"&gt;poetry&lt;/a&gt;
    
  &lt;/small&gt;
  &lt;section&gt;
    &lt;pre&gt;&lt;code&gt;Once I am sure there's nothing going on
I step inside, letting the door thud shut.
Another church: matting, seats, and stone
And little books; sprawlings of flowers, cut
For Sunday, brownish now; some brass and stuff
Up at the holy end; the small neat organ;
And a tense, musty, unignorable silence,
Brewed God knows how long. Hatless, I take off
My cycle-clips in awkward reverence.

Move forward, run my hand around the font.
From where I stand, the roof looks almost new -
Cleaned, or restored? Someone would know: I don't.
Mounting the lectern, I peruse a few
Hectoring large-scale verses, and pronounce
'Here endeth' much more loudly than I'd meant.
The echoes snigger briefly. Back at the door
I sign the book, donate an Irish sixpence,
Reflect the place was not worth stopping for. 

Yet stop I did: in fact I often do,
And always end much at a loss like this,
Wondering what to look for; wondering, too,
When churches will fall completely out of use
What we shall turn them into, if we shall keep
A few cathedrals chronically on show,
Their parchment, plate and pyx in locked cases,
And let the rest rent-free to rain and sheep.
Shall we avoid them as unlucky places? 

Or, after dark, will dubious women come
To make their children touch a particular stone;
Pick simples for a cancer; or on some
Advised night see walking a dead one?
Power of some sort will go on
In games, in riddles, seemingly at random;
But superstition, like belief, must die,
And what remains when disbelief has gone?
Grass, weedy pavement, brambles, buttress, sky, 

A shape less recognisable each week,
A purpose more obscure. I wonder who
Will be the last, the very last, to seek
This place for what it was; one of the crew
That tap and jot and know what rood-lofts were?
Some ruin-bibber, randy for antique,
Or Christmas-addict, counting on a whiff
Of gown-and-bands and organ-pipes and myrrh?
Or will he be my representative, 

Bored, uninformed, knowing the ghostly silt
Dispersed, yet tending to this cross of ground
Through suburb scrub because it held unspilt
So long and equably what since is found
Only in separation - marriage, and birth,
And death, and thoughts of these - for which was built 
This special shell? For, though I've no idea
What this accoutred frowsty barn is worth
It pleases me to stand in silence here;

A serious house on serious earth it is,
In whose blent air all our compulsions meet,
Are recognized, and robed as destinies,
And that much never can be obsolete,
Since someone will forever be surprising
A hunger in himself to be more serious,
And gravitating with it to this ground,
Which, he once heard, was proper to grow wise in,
If only that so many dead lie round.

-Philip Larkin&lt;/code&gt;&lt;/pre&gt;


    &lt;p class="links"&gt;
    
      &lt;a href="/posts/rust-web3.html"&gt;
        &lt;small&gt;
          &amp;laquo;A Rust Webserver
        &lt;/small&gt;
      &lt;/a&gt;
    
    
      &lt;a href="/posts/lunenberg-birthday-trip.html"&gt;
        &lt;small&gt;
          Lunenberg Birthday Trip&amp;raquo;
        &lt;/small&gt;
      &lt;/a&gt;
    
    &lt;/p&gt;
  &lt;/section&gt;
&lt;/article&gt;
</content>
    <id>https://www.kropla.ca/posts/church-going.html</id>
    <title>Church Going</title>
    <updated>2020-06-16T23:26:29Z</updated>
  </entry>
  <entry>
    <link rel="alternate" href="/posts/rust-web3.html"/>
    <content type="html">&lt;article&gt;
  &lt;h1&gt;&lt;a href="/posts/rust-web3.html"&gt;A Rust Webserver&lt;/a&gt;&lt;/h1&gt;
  &lt;p class="subtitle"&gt;2018-09-01&lt;/p&gt;
  &lt;small&gt;
    
      &lt;a href="/tags/programming"&gt;programming&lt;/a&gt;
    
      &lt;a href="/tags/python"&gt;python&lt;/a&gt;
    
      &lt;a href="/tags/rust"&gt;rust&lt;/a&gt;
    
      &lt;a href="/tags/webdev"&gt;webdev&lt;/a&gt;
    
  &lt;/small&gt;
  &lt;section&gt;
    &lt;p&gt;
The plan here is to examine a simple webserver that echos back the contents of requests as HTML. The purpose is to compare how you would do this in Rust vs Python, and what static typing and lifetimes and all the things Rust gives you feel from a programmer ergonomics standpoint compared to the equivalent in Python.  This is just some example toy code, and obviously not spec compliant&lt;label class="margin-toggle sidenote-number" for="sn-spec"&gt;&lt;/label&gt;
&lt;input id="sn-spec" class="margin-toggle" type="checkbox"/&gt;
&lt;span class="sidenote"&gt;
You should read &lt;a href="https://tools.ietf.org/html/rfc2616#section-5.1"&gt;the spec&lt;/a&gt; though! It's actually pretty straightforward, and learning things properly is a good thing.
&lt;/span&gt;
, but hopefully it illustrates some of the things that I think about programming languages.&lt;/p&gt;
&lt;h2&gt;
Server Structure&lt;/h2&gt;
&lt;p&gt;
The basic binary code is just &lt;a href="https://github.com/esnowkropla/rusty-web/blob/master/src/bin/main.rs"&gt;this&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="rust"&gt;extern crate rusty_web;

use rusty_web::server;

fn main() {
    server();
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
which loads the function &lt;code class="inline"&gt;server&lt;/code&gt; from our library and kicks it off.  The &lt;code class="inline"&gt;server&lt;/code&gt; function looks like &lt;a href="https://github.com/esnowkropla/rusty-web/blob/master/src/lib.rs"&gt;this&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="rust"&gt;fn handle_connection(mut stream: TcpStream) {
    let mut buff = String::new();
    stream.read_to_string(&amp;amp;mut buff).unwrap();
    let request = Request::new(&amp;amp;buff);
    println!(&quot;{:?}&quot;, buff);
    println!(&quot;{:?}&quot;, request);
}

pub fn server() {
    let listener = TcpListener::bind(&quot;127.0.0.1:8000&quot;).unwrap();

    for stream in listener.incoming() {
        handle_connection(stream.unwrap());
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
to make this example a little less trivial, let’s give the server two behaviours rather than one: If a GET request comes in, we’ll respond with an HTML version of the request, and if a POST request comes in, we’ll respond with a JSON object containing the form data.&lt;/p&gt;


    &lt;p class="links"&gt;
    
      &lt;a href="/posts/redrose.html"&gt;
        &lt;small&gt;
          &amp;laquo;A Red, Red Rose
        &lt;/small&gt;
      &lt;/a&gt;
    
    
      &lt;a href="/posts/church-going.html"&gt;
        &lt;small&gt;
          Church Going&amp;raquo;
        &lt;/small&gt;
      &lt;/a&gt;
    
    &lt;/p&gt;
  &lt;/section&gt;
&lt;/article&gt;
</content>
    <id>https://www.kropla.ca/posts/rust-web3.html</id>
    <title>A Rust Webserver</title>
    <updated>2018-09-01T17:32:47Z</updated>
  </entry>
  <entry>
    <link rel="alternate" href="/posts/redrose.html"/>
    <content type="html">&lt;article&gt;
  &lt;h1&gt;&lt;a href="/posts/redrose.html"&gt;A Red, Red Rose&lt;/a&gt;&lt;/h1&gt;
  &lt;p class="subtitle"&gt;2018-08-02&lt;/p&gt;
  &lt;small&gt;
    
      &lt;a href="/tags/burns"&gt;burns&lt;/a&gt;
    
      &lt;a href="/tags/poetry"&gt;poetry&lt;/a&gt;
    
  &lt;/small&gt;
  &lt;section&gt;
    &lt;pre&gt;&lt;code&gt;O my Luve's like a red, red rose
That’s newly sprung in june;
O my Luve's like the melodie
That’s sweetly play'd in tune:

As fair art thou, my bonnie lass,
So deep in luve am I:
And I will luve thee still, my dear,
Till a’ the seas gang dry:

Till a’ the seas gang dry, my dear,
And the rocks melt wi’ the sun:
I will luve thee still, my dear,
While the sands o’ life shall run.

And fare thee weel, my only Luve
And fare thee weel, a while!
And I will come again, my Luve,
Tho’ it were ten thousand mile.&lt;/code&gt;&lt;/pre&gt;


    &lt;p class="links"&gt;
    
      &lt;a href="/posts/summer-lightning.html"&gt;
        &lt;small&gt;
          &amp;laquo;Summer Lightning
        &lt;/small&gt;
      &lt;/a&gt;
    
    
      &lt;a href="/posts/rust-web3.html"&gt;
        &lt;small&gt;
          A Rust Webserver&amp;raquo;
        &lt;/small&gt;
      &lt;/a&gt;
    
    &lt;/p&gt;
  &lt;/section&gt;
&lt;/article&gt;
</content>
    <id>https://www.kropla.ca/posts/redrose.html</id>
    <title>A Red, Red Rose</title>
    <updated>2018-08-02T01:02:08Z</updated>
  </entry>
  <entry>
    <link rel="alternate" href="/posts/summer-lightning.html"/>
    <content type="html">&lt;article&gt;
  &lt;h1&gt;&lt;a href="/posts/summer-lightning.html"&gt;Summer Lightning&lt;/a&gt;&lt;/h1&gt;
  &lt;p class="subtitle"&gt;2018-03-10&lt;/p&gt;
  &lt;small&gt;
    
      &lt;a href="/tags/poetry"&gt;poetry&lt;/a&gt;
    
      &lt;a href="/tags/wodehouse"&gt;wodehouse&lt;/a&gt;
    
  &lt;/small&gt;
  &lt;section&gt;
    &lt;p&gt;
A certain critic - for such men, I may regret to say, do exist - made
the nasty remark about my last novel that it contained ‘all the old
Wodehouse characters under different names’. He has probably
now been eaten by bears, like the children who made mock of
the prophet Elisha: but if he still survives he will not be to
make a similar charge against &lt;em&gt;Summer Lightning&lt;/em&gt;. With my
superior intelligence, I have outgeneralled the man this time
by putting in all the old Wodehouse characters under the same
names.  Pretty silly it will make him feel, I rather fancy.&lt;/p&gt;


    &lt;p class="links"&gt;
    
      &lt;a href="/posts/rust-web2.html"&gt;
        &lt;small&gt;
          &amp;laquo;Thoughts on Rust Web-Development
        &lt;/small&gt;
      &lt;/a&gt;
    
    
      &lt;a href="/posts/redrose.html"&gt;
        &lt;small&gt;
          A Red, Red Rose&amp;raquo;
        &lt;/small&gt;
      &lt;/a&gt;
    
    &lt;/p&gt;
  &lt;/section&gt;
&lt;/article&gt;
</content>
    <id>https://www.kropla.ca/posts/summer-lightning.html</id>
    <title>Summer Lightning</title>
    <updated>2018-03-10T01:02:08Z</updated>
  </entry>
  <entry>
    <link rel="alternate" href="/posts/rust-web2.html"/>
    <content type="html">&lt;article&gt;
  &lt;h1&gt;&lt;a href="/posts/rust-web2.html"&gt;Thoughts on Rust Web-Development&lt;/a&gt;&lt;/h1&gt;
  &lt;p class="subtitle"&gt;2017-10-28&lt;/p&gt;
  &lt;small&gt;
    
      &lt;a href="/tags/programming"&gt;programming&lt;/a&gt;
    
      &lt;a href="/tags/rust"&gt;rust&lt;/a&gt;
    
      &lt;a href="/tags/webdev"&gt;webdev&lt;/a&gt;
    
  &lt;/small&gt;
  &lt;section&gt;
    &lt;p&gt;
This entry will be a little scattershot, just some miscellaneous thoughts and impressions.&lt;/p&gt;
&lt;h2&gt;
Interacting with APIs&lt;/h2&gt;
&lt;p&gt;
It’s a little inconvenient to be making a lot of little structs for each feature of an API; where in JavaScript or Python you would have a dictionary, if you want type safety you need to make a struct with the proper fields. Strictly speaking you don’t &lt;em&gt;need&lt;/em&gt; to; operating on &lt;a href="https://docs.serde.rs/serde_json/#operating-on-untyped-json-values"&gt;untyped JSON&lt;/a&gt; is actually fairly straightforward, but when you know that the rest of your codebase isn’t going to crash the parts that aren’t guarenteed by the compiler niggle in your brain.  The &lt;a href="https://github.com/serde-rs/json"&gt;serde-rs&lt;/a&gt; library is everything I want in a JSON serialization library. There’s not much in particular to call out, which is good in an infrastructure library; although I can say it’s … much more ergonomic than the serialization I wrote for &lt;a href="http://www.hairylittlebuggers.com"&gt;Hairy Little Buggers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
I wrote about half a dozen little programs to scrape data from YouTube and Twitch as part of &lt;a href="http://www.this link doesn't go anywhere dot com"&gt;secret project&lt;/a&gt;, as well as the main app; I would probably do one-off scraping type scripts in Python in future, with app code written in Rust.&lt;/p&gt;
&lt;h2&gt;
Type Safety!&lt;/h2&gt;
&lt;p&gt;
Rust’s type safety gives is extremely hard to give up; working with Python I constantly have to think harder about the inputs and outputs of my functions, becase the source and compiler isn’t doing it for me. &lt;/p&gt;


    &lt;p class="links"&gt;
    
      &lt;a href="/posts/rust-web.html"&gt;
        &lt;small&gt;
          &amp;laquo;Rust Web-Development, Part 1
        &lt;/small&gt;
      &lt;/a&gt;
    
    
      &lt;a href="/posts/summer-lightning.html"&gt;
        &lt;small&gt;
          Summer Lightning&amp;raquo;
        &lt;/small&gt;
      &lt;/a&gt;
    
    &lt;/p&gt;
  &lt;/section&gt;
&lt;/article&gt;
</content>
    <id>https://www.kropla.ca/posts/rust-web2.html</id>
    <title>Thoughts on Rust Web-Development</title>
    <updated>2017-10-28T22:32:47Z</updated>
  </entry>
  <entry>
    <link rel="alternate" href="/posts/rust-web.html"/>
    <content type="html">&lt;article&gt;
  &lt;h1&gt;&lt;a href="/posts/rust-web.html"&gt;Rust Web-Development, Part 1&lt;/a&gt;&lt;/h1&gt;
  &lt;p class="subtitle"&gt;2017-08-04&lt;/p&gt;
  &lt;small&gt;
    
      &lt;a href="/tags/programming"&gt;programming&lt;/a&gt;
    
      &lt;a href="/tags/rust"&gt;rust&lt;/a&gt;
    
      &lt;a href="/tags/webdev"&gt;webdev&lt;/a&gt;
    
  &lt;/small&gt;
  &lt;section&gt;
    &lt;p&gt;
Now that &lt;a href="http://store.steampowered.com/app/405240"&gt;Hairy Little Buggers&lt;/a&gt; is wrapped up, I figured I’d use my sabbatical to dive into web-development. This is also a good chance to play with &lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; again; the last time I checked it out was before 1.0 when I was playing with the &lt;a href="http://cryptopals.com/"&gt;Matasano crypto challenges&lt;/a&gt;, so it will be interesting to see how much more mature the ecosystem is.&lt;/p&gt;
&lt;p&gt;
Now, I don’t really know anything about web-development, so after a little research I picked up &lt;a href="https://www.amazon.ca/Flask-Web-Development-Developing-Applications/dp/1449372627/ref=sr_1_sc_1?ie=UTF8&amp;qid=1501866858&amp;sr=8-1-spell"&gt;Flask Web Development&lt;/a&gt; based on the &lt;a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world"&gt;Flask Mega-Tutorial&lt;/a&gt;. I know Python fairly well so I can mentally translate the Python into Rust, and &lt;a href="http://flask.pocoo.org"&gt;Flask&lt;/a&gt; seems like the framework I would pick were I to write a web app in Python. &lt;/p&gt;
&lt;h2&gt;
Framework Selection&lt;/h2&gt;
&lt;p&gt;
Much as I love writing everything myself, sometimes it makes sense to stand on the shoulders of giants. A combination of browsing the rust sub-reddit and searching the web suggested five initial candidates for a web framework:
&lt;a href="https://github.com/nickel-org/nickel.rs"&gt;Nickel&lt;/a&gt;, 
&lt;a href="https://ironframework.io"&gt;Iron&lt;/a&gt;, 
&lt;a href="https://rocket.rs"&gt;Rocket&lt;/a&gt;, 
&lt;a href="https://github.com/tomaka/rouille"&gt;Rouille&lt;/a&gt;, and 
&lt;a href="https://github.com/fengsp/pencil"&gt;Pencil&lt;/a&gt;. The following is just my own personal experiences with each framework, and is definitely not meant to be the definitive objective guide to web developent in Rust. In particular, these are my fickle first impressions and snap judgements. Do your own research!&lt;/p&gt;
&lt;h3&gt;
Rocket&lt;/h3&gt;
&lt;p&gt;
Rocket requires the use of the &lt;code class="inline"&gt;nightly&lt;/code&gt; compiler, which annoys me.  A pretty decent fraction of common packages in the Rust ecosystem seemingly still rely on &lt;code class="inline"&gt;nightly&lt;/code&gt; rather than &lt;code class="inline"&gt;stable&lt;/code&gt;. Using Rust in production is already questionable given it’s novelty, and using the &lt;code class="inline"&gt;nightly&lt;/code&gt; version of the compiler strikes me as a bridge too far. So Rocket’s out.&lt;/p&gt;
&lt;h3&gt;
Rouille and Pencil&lt;/h3&gt;
&lt;p&gt;
Rouille and Pencil are smaller frameworks, which aligns with my desire to do most of the programming and component selection myself rather than delegating to a monster framework like Rails or Django, so I tried them out next.  Both seem pretty immature though, so after getting my &lt;code class="inline"&gt;hello-world&lt;/code&gt; servers up and running it seemed like I would have to build a &lt;em&gt;lot&lt;/em&gt; myself. At that point the impedance mismatch between my code and the framework makes me want to just write the framework part myself as well. Scratch these two off the list.&lt;/p&gt;
&lt;h3&gt;
Nickel and Iron&lt;/h3&gt;
&lt;p&gt;
Nickel and Iron seem pretty similar, with more of a batteries-included philosophy then Rouille or Pencil. Iron seems more mature and seems to have more development activity around it, so I picked Iron (sorry Nickel).&lt;/p&gt;
&lt;p&gt;
I got templating working with &lt;a href="https://github.com/sunng87"&gt;handlebars-iron&lt;/a&gt;, and was messing around with sessions and forms when I stumbled upon a bug I could not solve. Implementing &lt;a href="https://en.wikipedia.org/wiki/Post/Redirect/Get"&gt;Post/Redirect/Get&lt;/a&gt; resulted in something in the stack (I’m not sure if it was &lt;a href="https://github.com/hyperium/hyper"&gt;Hyper&lt;/a&gt; or Iron) parsing the incoming GET request as &lt;code class="inline"&gt;Method::Extension(user=USERNAME&amp;amp;password=PASSWDGET)&lt;/code&gt;, rather than what I would expect &lt;code class="inline"&gt;Method::Get&lt;/code&gt;. It looks like Iron is interpreting the form data as part of the method? Forms a pretty common part of a web app, one would think they would work pretty well. Iron includes handlers to redirect, and a &lt;code class="inline"&gt;url_for&lt;/code&gt; function to find the address of routes. After a couple of days of not being able to find a problem on my end, I gave up on Iron. The next step was to start debugging &lt;a href="https://ironframework.io"&gt;Iron&lt;/a&gt; and &lt;a href="https://github.com/hyperium/hyper"&gt;Hyper&lt;/a&gt; code to figure out why they’re not parsing the http request correctly, and pretty much the whole point of a framework is to avoid parsing request headers yourself. You can check out the final state of my iron experiment &lt;a href="https://github.com/esnowkropla/iron_test"&gt;here&lt;/a&gt;; it’s pretty functional, and the P/R/G problem is reasonably well illustrated because the code is so small.&lt;/p&gt;
&lt;h2&gt;
Pure Hyper&lt;/h2&gt;
&lt;p&gt;
At this point I figured that for a simple CRUD app I don’t necessarily need a complete web framework, maybe I can just work off of a bare HTTP server. I have already briefly mentioned &lt;a href="https://hyper.rs/"&gt;Hyper&lt;/a&gt;; it appears to be THE http server for Rust. After getting it set up and running through the tutorials though, I was confounded by complexity of the traits that are required to be implemented for fielding requests; Hyper appears to be in transition between blocking and async io, and the user interface is still a little hairy. In particular I’m going to need global mutable state at some point (the database), and getting the borrowing working correctly was proving more finicky than I would like.&lt;/p&gt;
&lt;p&gt;
It was at this point that I considered going below even Hyper, and writing the HTTP server myself from scratch. This is silly; if I want to get anything done I shouldn’t rewrite the whole stack myself. The other alternative would be to abandon Rust and just play around with Flask; I could at least build my web apps, even if I wasn’t playing with a new(ish) language.&lt;/p&gt;
&lt;p&gt;
Luckily for me though, as I was searching around for the solution to my latest problem I saw a code example of &lt;a href="https://rocket.rs"&gt;Rocket&lt;/a&gt;, which I had so quickly dismissed before; and I liked what I saw! Request routing, sessions handling, state handling, with a heavy emphasis on developer experience. A fair bit of magic in the code generation to handle the routing, but implementing the traits in the request guards and the serialization was REALLY easy. Converted, I started up a new project and threw Rocket into the Cargo.toml. This is long enough, so we’ll leave off here; next week, actually building things!&lt;/p&gt;


    &lt;p class="links"&gt;
    
      &lt;a href="/posts/campus.html"&gt;
        &lt;small&gt;
          &amp;laquo;Which side are we on?
        &lt;/small&gt;
      &lt;/a&gt;
    
    
      &lt;a href="/posts/rust-web2.html"&gt;
        &lt;small&gt;
          Thoughts on Rust Web-Development&amp;raquo;
        &lt;/small&gt;
      &lt;/a&gt;
    
    &lt;/p&gt;
  &lt;/section&gt;
&lt;/article&gt;
</content>
    <id>https://www.kropla.ca/posts/rust-web.html</id>
    <title>Rust Web-Development, Part 1</title>
    <updated>2017-08-04T14:43:49Z</updated>
  </entry>
  <entry>
    <link rel="alternate" href="/posts/campus.html"/>
    <content type="html">&lt;article&gt;
  &lt;h1&gt;&lt;a href="/posts/campus.html"&gt;Which side are we on?&lt;/a&gt;&lt;/h1&gt;
  &lt;p class="subtitle"&gt;2017-07-14&lt;/p&gt;
  &lt;small&gt;
    
      &lt;a href="/tags/culture-war"&gt;culture-war&lt;/a&gt;
    
  &lt;/small&gt;
  &lt;section&gt;
    &lt;p&gt;
Background material:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
&lt;a href="http://nymag.com/selectall/2017/07/angela-nagles-kill-all-normies-the-alt-right-and-4chan.html"&gt;Review of Angela Nagle’s ‘Kill all normies’&lt;/a&gt;  &lt;/li&gt;
  &lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=2cMYfxOFBBM"&gt;Video of Evergreen University student protests&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;


    &lt;p class="links"&gt;
    
      &lt;a href="/posts/recessional.html"&gt;
        &lt;small&gt;
          &amp;laquo;Recessional
        &lt;/small&gt;
      &lt;/a&gt;
    
    
      &lt;a href="/posts/rust-web.html"&gt;
        &lt;small&gt;
          Rust Web-Development, Part 1&amp;raquo;
        &lt;/small&gt;
      &lt;/a&gt;
    
    &lt;/p&gt;
  &lt;/section&gt;
&lt;/article&gt;
</content>
    <id>https://www.kropla.ca/posts/campus.html</id>
    <title>Which side are we on?</title>
    <updated>2017-07-14T17:31:12Z</updated>
  </entry>
  <entry>
    <link rel="alternate" href="/posts/recessional.html"/>
    <content type="html">&lt;article&gt;
  &lt;h1&gt;&lt;a href="/posts/recessional.html"&gt;Recessional&lt;/a&gt;&lt;/h1&gt;
  &lt;p class="subtitle"&gt;2017-07-10&lt;/p&gt;
  &lt;small&gt;
    
      &lt;a href="/tags/poetry"&gt;poetry&lt;/a&gt;
    
  &lt;/small&gt;
  &lt;section&gt;
    &lt;pre&gt;&lt;code class="text"&gt;God of our fathers, known of old,
Lord of our far-flung battle line,
Beneath whose awful hand we hold
Dominion over palm and pine -
Lord God of Hosts, be with us yet,
Lest we forget - lest we forget!

The tumult and the shouting dies;
The Captains and the Kings depart:
Still stands thine ancient sacrifice,
An humble and a contrite heart.
Lord God of Hosts, be with us yet,
Lest we forget - lest we forget!

Far-called our navies melt away;
On dune and headland sinks the fire:
Lo, all our pomp of yesterday
Is one with Nineveh and Tyre!
Judge of the Nations, spare us yet,
Lest we forget - lest we forget!

If, drunk with sight of power, we loose
Wild tongues that have not Thee in awe,
Such boastings as the Gentiles use,
Or lesser breeds without the Law -
Lord God of Hosts, be with us yet,
Lest we forget - lest we forget!

For heathen heart that puts her trust
In reeking tube and iron shard,
All valiant dust that builds on dust,
And guarding calls not Thee to guard,
For frantic boast and foolish word-
Thy Mercy on Thy People, Lord!

-Rudyard Kipling&lt;/code&gt;&lt;/pre&gt;


    &lt;p class="links"&gt;
    
      &lt;a href="/posts/excelsior.html"&gt;
        &lt;small&gt;
          &amp;laquo;Excelsior
        &lt;/small&gt;
      &lt;/a&gt;
    
    
      &lt;a href="/posts/campus.html"&gt;
        &lt;small&gt;
          Which side are we on?&amp;raquo;
        &lt;/small&gt;
      &lt;/a&gt;
    
    &lt;/p&gt;
  &lt;/section&gt;
&lt;/article&gt;
</content>
    <id>https://www.kropla.ca/posts/recessional.html</id>
    <title>Recessional</title>
    <updated>2017-07-10T14:08:05Z</updated>
  </entry>
  <entry>
    <link rel="alternate" href="/posts/excelsior.html"/>
    <content type="html">&lt;article&gt;
  &lt;h1&gt;&lt;a href="/posts/excelsior.html"&gt;Excelsior&lt;/a&gt;&lt;/h1&gt;
  &lt;p class="subtitle"&gt;2017-07-10&lt;/p&gt;
  &lt;small&gt;
    
      &lt;a href="/tags/poetry"&gt;poetry&lt;/a&gt;
    
  &lt;/small&gt;
  &lt;section&gt;
    &lt;pre&gt;&lt;code&gt;The shades of night were falling fast,
As through an Alpine village passed
A youth, who bore, 'mid snow and ice,
A banner with the strange device,
    Excelsior!
    
His brow was sad; his eye beneath,
Flashed like a falchion from its sheath,
And like a silver clarion rung
The accents of that unknown tongue,
    Excelsior!

In happy homes he saw the light
Of household fires gleam warm and bright;
Above, the spectral glaciers shone,
And from his lips escaped a groan,
    Excelsior!

"Try not the Pass!" the old man said;
"Dark lowers the tempest overhead,
The roaring torrent is deep and wide!"
And loud that clarion voice replied,
    Excelsior!

"Oh stay," the maiden said, "and rest
They weary head upon this breast!"
A tear stood in his bright blue eye,
But still he answered, with a sigh,
    Excelsior!

"Beware the pine-tree's withered branch!
Beware the awful avalanche!"
This was the peasant's last Good-night,
A voice replied, far up the height,
    Excelsior!

At break of day, as heavenward
The pious monks of Saint Bernard
Uttered the oft-repeated prayer,
A voice cried through the startled air,
    Excelsior!

A traveller, by the faithful hound,
Half-buried in the snow was found,
Still grasping in his hand of ice
That banner with the strange device,
    Excelsior!

There in the twilight cold and gray,
Lifeless, but beautiful, he lay,
And from the sky, serene and far,
A voice fell like a falling star,
    Excelsior!

-Longfellow&lt;/code&gt;&lt;/pre&gt;


    &lt;p class="links"&gt;
    
      &lt;a href="/posts/first-blog-entry.html"&gt;
        &lt;small&gt;
          &amp;laquo;First Blog Entry
        &lt;/small&gt;
      &lt;/a&gt;
    
    
      &lt;a href="/posts/recessional.html"&gt;
        &lt;small&gt;
          Recessional&amp;raquo;
        &lt;/small&gt;
      &lt;/a&gt;
    
    &lt;/p&gt;
  &lt;/section&gt;
&lt;/article&gt;
</content>
    <id>https://www.kropla.ca/posts/excelsior.html</id>
    <title>Excelsior</title>
    <updated>2017-07-10T13:48:29Z</updated>
  </entry>
  <entry>
    <link rel="alternate" href="/posts/first-blog-entry.html"/>
    <content type="html">&lt;article&gt;
  &lt;h1&gt;&lt;a href="/posts/first-blog-entry.html"&gt;First Blog Entry&lt;/a&gt;&lt;/h1&gt;
  &lt;p class="subtitle"&gt;2017-07-07&lt;/p&gt;
  &lt;small&gt;
    
  &lt;/small&gt;
  &lt;section&gt;
    &lt;p&gt;
Alright, I’ve rejiggered my website yet again.  This actually has some functionality, so maybe I’ll actually manage to stick to it this time.  Then again, the mark of a true academic is to neglect their website.&lt;/p&gt;


    &lt;p class="links"&gt;
    
    
      &lt;a href="/posts/excelsior.html"&gt;
        &lt;small&gt;
          Excelsior&amp;raquo;
        &lt;/small&gt;
      &lt;/a&gt;
    
    &lt;/p&gt;
  &lt;/section&gt;
&lt;/article&gt;
</content>
    <id>https://www.kropla.ca/posts/first-blog-entry.html</id>
    <title>First Blog Entry</title>
    <updated>2017-07-07T21:17:40Z</updated>
  </entry>
</feed>